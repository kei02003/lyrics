{"version":3,"sources":["components/utils.js","components/InputBox.js","components/SongLyric.js","components/QueriedLyrics.js","components/InfoButton.js","components/constants.js","components/InfoModal.js","components/FilterModal.js","components/App.js","index.js"],"names":["cleanLyric","lyric","cleaned_lyric","replace","containsQuery","query","toLowerCase","regex","RegExp","search","queriesFound","start","found","substring","length","isMobile","mobileRegex","navigator","userAgent","boldQueries","queries","reduce","boldQuery","end","boldedLyric","charAt","URL_QUERY_PARAM","URL_ALBUM_PARAM","getURLQueryStrings","URL","window","location","searchParams","getAll","getURLAlbumStrings","albumMap","require","mobile","InputBox","submitHandler","filterButtonHandler","queryString","useState","setQuery","useEffect","className","onSubmit","event","trim","preventDefault","type","value","onChange","target","onClick","SongLyric","album","song","prev","next","dangerouslySetInnerHTML","__html","lyricsJSON","QueriedLyrics","selectedAlbums","isSelectedAlbum","albumCategory","includes","songs","foundInSong","i","songLyric","timesFound","multiplicity","occurrences","countOccurrences","counter","Object","keys","sort","album1","album2","map","some","InfoButton","handler","ArtistName","InfoModal","display","style","fontSize","href","FilterModal","albumFilters","setAlbumFilters","setSelectedAlbums","albums","push","getAlbums","handleChange","checked","concat","filter","selectedAlbum","App","setQueries","infoModal","setInfoModal","filterModal","setFilterModal","history","useHistory","searchHandler","URLQueryString","split","join","JSON","stringify","listen","action","ReactDOM","render","basename","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2fb1042d.chunk.js","sourcesContent":["// @flow\n\n// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping\nconst escapeRegExp = (str: string): string => {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n};\n\nconst cleanLyric = (lyric: string): string => {\n  // Replace special quotes with normal quotes\n  let cleaned_lyric = lyric.replace(/\\u2018|\\u2019/g, \"'\");\n  cleaned_lyric = cleaned_lyric.replace(/\\u201C|\\u201D/g, '\"');\n  // Replace special unicode spaces with standard space\n  cleaned_lyric = cleaned_lyric.replace(\n    /[\\u00A0\\u1680​\\u180e\\u2000-\\u2009\\u200a​\\u200b​\\u202f\\u205f​\\u3000]/g,\n    \" \"\n  );\n  // Replace dashes with space and single hyphen\n  cleaned_lyric = cleaned_lyric.replace(/\\u2013|\\u2014/g, \" - \");\n  // Replace cyrillic + accented Es with normal Es\n  cleaned_lyric = cleaned_lyric.replace(/\\u0435/g, \"e\");\n  return cleaned_lyric;\n};\n\nexport const containsQuery = (lyric: string, query: string): number => {\n  query = cleanLyric(query.toLowerCase());\n  query = query.replace(/\\u00e9/g, \"e\");\n  lyric = lyric.replace(/\\u00e9/g, \"e\");\n  const regex = new RegExp(\n    `([\\\\(\\\\)\\\\.\\\\-?!;:,\\\\s\\u2026\"]|^)${escapeRegExp(\n      query\n    )}([\\\\(\\\\)\\\\.\\\\-?!;:,\\\\s\\u2026\"]|$)`\n  );\n  return cleanLyric(lyric.toLowerCase()).search(regex);\n};\n\nexport const queriesFound = (lyric: string, query: string): number => {\n  lyric = cleanLyric(lyric);\n  query = cleanLyric(query);\n  let start: number;\n  let found = 0;\n  do {\n    start = containsQuery(lyric, query);\n    if (start === -1) {\n      return found;\n    }\n    found += 1;\n    lyric = lyric.substring(start + query.length);\n  } while (lyric.length > 0);\n  return found;\n};\n\nexport const isMobile = (): boolean => {\n  const mobileRegex = new RegExp(\n    `Android|webOS|iPhone|iPad|BlackBerry|Phone|Mobile`\n  );\n  return navigator.userAgent.search(mobileRegex) >= 0;\n};\n\nexport const boldQueries = (lyric: string, queries: Array<string>): string => {\n  lyric = cleanLyric(lyric);\n  return queries.reduce(boldQuery, lyric);\n}\n\nexport const boldQuery = (lyric: string, query: string): string => {\n  query = cleanLyric(query);\n  let start: number, end: number;\n  let boldedLyric = \"\";\n  do {\n    start = containsQuery(lyric, query);\n    if (start === -1) {\n      return boldedLyric + lyric;\n    }\n    end = start + query.length;\n    // If not at the beginning, we need to shift start and end\n    // because containsQuery will return the index of the space\n    // before the start of the query\n    if (lyric.toLowerCase().charAt(0) !== query.toLowerCase().charAt(0)) {\n      start += 1;\n      end += 1;\n    }\n    boldedLyric =\n      boldedLyric +\n      lyric.substring(0, start) +\n      '<span class=\"query\">' +\n      lyric.substring(start, end) +\n      \"</span>\";\n    lyric = lyric.substring(end);\n  } while (lyric.length > 0);\n  return boldedLyric;\n};\n\nexport const URL_QUERY_PARAM = 'query'\nexport const URL_ALBUM_PARAM = 'album'\n\nexport const getURLQueryStrings = (): Array<string> => {\n  const currentURL = new URL(window.location);\n  return currentURL.searchParams.getAll(URL_QUERY_PARAM);\n}\n\nexport const getURLAlbumStrings = (): Array<string> => {\n  const currentURL = new URL(window.location);\n  return currentURL.searchParams.getAll(URL_ALBUM_PARAM);\n}\n\nconst albumMap = require(\"../taylor-swift-lyrics/album_map.json\");\n\nexport const getAlbums = (): Array<string> => {\n  const albums = [];\n  for (const album in albumMap) {\n    for (const albumCategory of albumMap[album]) {\n      if (!albums.includes(albumCategory)) {\n        albums.push(albumCategory);\n      }\n    }\n  }\n  return albums;\n}","// @flow\nimport \"../style/InputBox.css\";\nimport { isMobile } from \"./utils\";\nimport React, { useEffect, useState } from \"react\";\n\nconst mobile = isMobile();\n\ntype InputBoxProps = {\n  submitHandler: (string) => void,\n  filterButtonHandler: () => void,\n  queryString: string,\n};\n\nexport default function InputBox({\n  submitHandler,\n  filterButtonHandler,\n  queryString,\n}: InputBoxProps): React$MixedElement {\n  const [query, setQuery] = useState<string>(queryString);\n\n  useEffect(() => {\n    setQuery(queryString);\n  }, [queryString]);\n\n  const handleChange = (event: any) => {\n    setQuery(event.target.value);\n  };\n\n  const handleSubmit = (event: any) => {\n    if (query !== \"\") submitHandler(query.trim());\n    event.preventDefault();\n  };\n\n  return (\n    <>\n      <div className=\"InputBox\">\n        <form onSubmit={handleSubmit}>\n          <label>\n            <input\n              className={mobile ? \"queryBox queryBox-mobile\" : \"queryBox\"}\n              type=\"text\"\n              value={query}\n              onChange={handleChange}\n            />\n          </label>\n          <input className=\"submitButton\" type=\"submit\" value=\"➔\" />\n        </form>\n        <div className=\"filterModalButtonWrapper\">\n          <span className=\"filterModalButton\" onClick={filterButtonHandler}>\n            Filter by album\n          </span>\n        </div>\n      </div>\n    </>\n  );\n}\n","// @flow\nimport \"../style/SongLyric.css\";\nimport { boldQueries } from \"./utils.js\";\nimport React from \"react\";\n\ntype SongLyricProps = {\n  album: string,\n  song: string,\n  prev: string,\n  lyric: string,\n  next: string,\n  queries: Array<string>,\n};\n\nexport default function SongLyric({\n  album,\n  song,\n  prev,\n  lyric,\n  next,\n  queries,\n}: SongLyricProps): React$MixedElement {\n  return (\n    <div className=\"SongLyric\">\n      <p>\n        {prev}\n        {prev.length > 0 ? <br /> : \"\"}\n        <span\n          className=\"lyric\"\n          dangerouslySetInnerHTML={{\n            __html: boldQueries(lyric, queries),\n          }}\n        />\n        {next.length > 0 ? <br /> : \"\"}\n        {next}\n      </p>\n      {song}\n      {album !== \"NaN\" ? \",\" : \"\"} <i>{album !== \"NaN\" ? album : \"\"}</i>\n      <hr></hr>\n    </div>\n  );\n}\n","// @flow\nimport \"../style/QueriedLyrics.css\";\nimport React from \"react\";\nimport SongLyric from \"./SongLyric\";\nimport { containsQuery, isMobile, queriesFound } from \"./utils.js\";\n\nconst lyricsJSON = require(\"../taylor-swift-lyrics/lyrics.json\");\nconst albumMap = require(\"../taylor-swift-lyrics/album_map.json\");\nconst mobile = isMobile();\ntype QueriedLyricsProps = {\n  queries: Array<string>,\n  selectedAlbums: Array<string>,\n};\n\nexport default function QueriedLyrics({\n  queries,\n  selectedAlbums,\n}: QueriedLyricsProps): React$MixedElement {\n  const isSelectedAlbum = (album: string): boolean => {\n    if (selectedAlbums.length === 0) {\n      return true;\n    }\n    for (const albumCategory of albumMap[album]) {\n      if (selectedAlbums.includes(albumCategory)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  const countOccurrences = (): { occurrences: number, songs: number } => {\n    let found = 0;\n    let songs = 0;\n    for (const query of queries) {\n      for (const album in lyricsJSON) {\n        if (album !== \"Uncategorized\" && isSelectedAlbum(album)) {\n          for (const song in lyricsJSON[album]) {\n            let foundInSong = false;\n            for (let i = 0; i < lyricsJSON[album][song].length; i++) {\n              const songLyric = lyricsJSON[album][song][i];\n              const timesFound = queriesFound(songLyric.lyric, query);\n              found += songLyric.multiplicity * timesFound;\n              foundInSong = foundInSong || timesFound > 0;\n            }\n            songs += foundInSong ? 1 : 0;\n          }\n        }\n      }\n    }\n    return { occurrences: found, songs: songs };\n  };\n\n  const { occurrences, songs } = countOccurrences();\n  let counter = 0;\n  return (\n    <div>\n      <div className={mobile ? \"QueriedLyrics-mobile\" : \"QueriedLyrics\"}>\n        {Object.keys(lyricsJSON)\n          .sort((album1, album2) => {\n            if (album1 === \"Unreleased Songs\") {\n              return 1;\n            } else if (album2 === \"Unreleased Songs\") {\n              return -1;\n            }\n            return 0;\n          })\n          .map((album) =>\n            Object.keys(lyricsJSON[album]).map((song) =>\n              lyricsJSON[album][song].map((songLyric) => {\n                counter++;\n                if (\n                  isSelectedAlbum(album) &&\n                  queries.some(\n                    (query) => containsQuery(songLyric.lyric, query) >= 0\n                  ) &&\n                  album !== \"Uncategorized\"\n                ) {\n                  return (\n                    <SongLyric\n                      key={counter}\n                      album={\n                        albumMap[album] !== \"Collaborations\" &&\n                        albumMap[album] !== \"Movie Soundtracks\"\n                          ? albumMap[album]\n                          : album\n                      }\n                      song={song}\n                      lyric={songLyric.lyric}\n                      next={songLyric.next}\n                      prev={songLyric.prev}\n                      queries={queries}\n                    />\n                  );\n                }\n                return <></>;\n              })\n            )\n          )}\n      </div>\n      <div className={mobile ? \"totalResults-mobile\" : \"totalResults\"}>\n        Found {occurrences} usage{occurrences === 1 ? \"\" : \"s\"} in {songs} song\n        {songs === 1 ? \"\" : \"s\"}{selectedAlbums.length > 0 ? \" from selected albums\" : \"\"}\n      </div>\n    </div>\n  );\n}\n","// @flow\nimport \"../style/InfoButton.css\";\nimport React from \"react\";\n\ntype InfoButtonProps = {\n  handler: (any) => void,\n};\n\nexport default function InfoButton({\n  handler,\n}: InfoButtonProps): React$MixedElement {\n  return (\n    <div className=\"InfoButton\" onClick={handler}>\n      ?\n    </div>\n  );\n}\n","// @flow\nexport const ArtistName = \"taylor swift\";\n\nexport const ModalText =\n  'Search for a word or a phrase and see all the places Taylor Swift \\\n  has used it in her music! To search for multiple words or phrases, use \\\n  a comma between them. Scraped data can be found \\\n  <a href=\"https://github.com/shaynak/taylor-swift-lyrics\">here</a>. \\\n  Curious about what people are searching? See our \\\n  <a href=\"https://shaynak-taylor-swift.goatcounter.com/\">analytics</a>! \\\n  <br><br>Last updated: 12/31/21.';\n","// @flow\nimport \"../style/InfoModal.css\";\nimport { isMobile } from \"./utils\";\nimport { ModalText } from \"./constants\";\nimport React from \"react\";\n\nconst mobile = isMobile();\n\ntype InfoModalProps = {\n  handler: () => void,\n  display: boolean,\n};\n\nexport default function InfoModal({\n  handler,\n  display,\n}: InfoModalProps): React$MixedElement {\n  const clickOutHandler = (event: any) => {\n    if (event.target.className !== \"ModalBox\") {\n      handler();\n    }\n  };\n\n  return (\n    <div\n      className=\"InfoModal\"\n      onClick={clickOutHandler}\n      style={{ display: display ? \"block\" : \"none\" }}\n    >\n      <div className={mobile ? \"ModalBox ModalBox-mobile\" : \"ModalBox\"}>\n        <p dangerouslySetInnerHTML={{ __html: ModalText }} />\n        {/** CREDITS: Please do not edit this. Feel free to add your own credits to ModalText. */}\n        <p style={{ fontSize: \"14px\" }}>\n          Made by&nbsp;<a href=\"http://shaynak.github.io\">Shayna Kothari</a>\n          &nbsp;using&nbsp;\n          <a href=\"http://reactjs.org\">React</a>. Lyrics scraped from&nbsp;\n          <a href=\"http://genius.com\">Genius</a>&nbsp; using&nbsp;\n          <a href=\"https://github.com/johnwmillr/LyricsGenius\">LyricsGenius</a>.\n          If you have comments or suggestions, contact me by{\" \"}\n          <a href=\"mailto:shayna.kothari@berkeley.edu\">email</a>!\n        </p>\n      </div>\n    </div>\n  );\n}\n","// @flow\nimport \"../style/FilterModal.css\";\nimport { isMobile, getAlbums } from \"./utils\";\nimport { ModalText } from \"./constants\";\nimport React, { useState } from \"react\";\n\nconst mobile = isMobile();\n\ntype FilterModalProps = {\n  albumFilters: Array<string>,\n  handler: () => void,\n  setAlbumFilters: (Array<string>) => void,\n  display: boolean,\n};\n\nexport default function FilterModal({\n  albumFilters,\n  handler,\n  setAlbumFilters,\n  display,\n}: FilterModalProps): React$MixedElement {\n  const [selectedAlbums, setSelectedAlbums] = useState<Array<string>>(\n    albumFilters\n  );\n\n  const albums = getAlbums();\n\n  const clickOutHandler = (event: any) => {\n    if (event.target.className === \"FilterModal\") {\n      setAlbumFilters(selectedAlbums);\n      handler();\n    }\n  };\n\n  const handleChange = (event: any) => {\n    const album: string = event.target.value;\n    if (event.target.checked && !selectedAlbums.includes(album)) {\n      setSelectedAlbums(selectedAlbums.concat(album));\n    } else if (!event.target.checked) {\n      setSelectedAlbums(\n        selectedAlbums.filter((selectedAlbum) => selectedAlbum !== album)\n      );\n    }\n  };\n\n  const handleSubmit = (event: any) => {\n    setAlbumFilters(selectedAlbums);\n    handler();\n    event.preventDefault();\n  };\n\n  return (\n    <div\n      className=\"FilterModal\"\n      onClick={clickOutHandler}\n      style={{ display: display ? \"block\" : \"none\" }}\n    >\n      <div className={mobile ? \"ModalBox ModalBox-mobile\" : \"ModalBox\"}>\n        Select any albums and/or categories of music that you'd like to filter\n        on! If no albums are selected, all albums will be searched. Click out to save.\n        <div className=\"filterInput\">\n          <form onSubmit={handleSubmit}>\n            {albums.sort().map((album) => (\n              <label className=\"checkboxInput\">\n                <input\n                  className={\"checkbox\"}\n                  checked={selectedAlbums.includes(album)}\n                  type=\"checkbox\"\n                  value={album}\n                  onChange={handleChange}\n                />\n                {album}\n              </label>\n            ))}\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n","// @flow\nimport \"../style/index.css\";\nimport \"../style/App.css\";\nimport InputBox from \"./InputBox\";\nimport QueriedLyrics from \"./QueriedLyrics\";\nimport InfoButton from \"./InfoButton\";\nimport InfoModal from \"./InfoModal\";\nimport FilterModal from \"./FilterModal\";\nimport {\n  isMobile,\n  getURLQueryStrings,\n  getURLAlbumStrings,\n  URL_QUERY_PARAM,\n  URL_ALBUM_PARAM,\n} from \"./utils\";\nimport { ArtistName } from \"./constants\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst mobile = isMobile();\n\nfunction App(): React$MixedElement {\n  const [queries, setQueries] = useState<Array<string>>(getURLQueryStrings());\n  const [albumFilters, setAlbumFilters] = useState<Array<string>>(\n    getURLAlbumStrings()\n  );\n  const [infoModal, setInfoModal] = useState<boolean>(false);\n  const [filterModal, setFilterModal] = useState<boolean>(false);\n  const history = useHistory();\n\n  const searchHandler = (query: string) => {\n    const queryStrings = query\n      .split(\",\")\n      .map((queryString) => queryString.trim())\n      .filter((queryString) => queryString !== \"\");\n    const URLQueryString = queryStrings\n      .map((query) => URL_QUERY_PARAM + \"=\" + query)\n      .concat(albumFilters.map((album) => URL_ALBUM_PARAM + \"=\" + album))\n      .join(\"&\");\n    history.push({ search: URLQueryString });\n  };\n\n  useEffect(() => {\n    // Re-do search if user selects filters unless user is on home screen\n    if (queries.length > 0) {\n      searchHandler(queries.join(\",\"));\n    }\n  }, [JSON.stringify(albumFilters)]);\n\n  history.listen((location, action) => {\n    setQueries(getURLQueryStrings());\n    setAlbumFilters(getURLAlbumStrings());\n  });\n\n  const infoButtonHandler = () => setInfoModal(true);\n  const infoModalHandler = () => setInfoModal(false);\n\n  const filterButtonHandler = () => setFilterModal(true);\n  const filterModalHandler = () => setFilterModal(false);\n\n  return (\n    <div className=\"App\">\n      <InfoModal handler={infoModalHandler} display={infoModal} />\n      <FilterModal\n        handler={filterModalHandler}\n        display={filterModal}\n        albumFilters={albumFilters}\n        setAlbumFilters={setAlbumFilters}\n      />\n      {queries.length > 0 ? (\n        <div className=\"top-title\">\n          <span\n            className={mobile ? \"top-text-mobile header\" : \"top-text header\"}\n            onClick={(event) => {\n              setQueries([]);\n              setAlbumFilters([]);\n              history.push(\"/\");\n            }}\n          >\n            {ArtistName} lyric searcher\n          </span>\n        </div>\n      ) : (\n        <div className=\"title\">\n          <span\n            className={\n              mobile ? \"title-text-mobile header\" : \"title-text header\"\n            }\n          >\n            {ArtistName} <br /> lyric searcher\n          </span>\n        </div>\n      )}\n      <InputBox\n        submitHandler={searchHandler}\n        filterButtonHandler={filterButtonHandler}\n        queryString={queries.join(\", \")}\n      />\n      {queries.length > 0 ? <QueriedLyrics queries={queries} selectedAlbums={albumFilters} /> : null}\n      <InfoButton handler={infoButtonHandler}></InfoButton>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.css\";\nimport App from \"./components/App\";\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nReactDOM.render(\n  <Router basename='/taylor-swift' >\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Router>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}
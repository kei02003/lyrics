{"version":3,"sources":["components/utils.js","components/InputBox.js","components/SongLyric.js","components/QueriedLyrics.js","components/InfoButton.js","components/InfoModal.js","components/App.js","reportWebVitals.js","index.js"],"names":["cleanLyric","lyric","cleaned_lyric","replace","containsQuery","query","toLowerCase","regex","RegExp","search","isMobile","mobileRegex","navigator","userAgent","mobile","InputBox","state","undefined","handleChange","bind","handleSubmit","event","this","setState","target","value","props","submitHandler","trim","preventDefault","className","onSubmit","type","onChange","React","Component","SongLyric","start","end","boldedLyric","length","charAt","substring","prev","dangerouslySetInnerHTML","__html","boldQuery","next","song","album","lyricsJSON","require","QueriedLyrics","occurrences","document","querySelectorAll","Object","keys","map","songLyric","InfoButton","onClick","handler","InfoModal","faded","clickOutHandler","style","display","href","App","queried","modal","searchHandler","infoButtonHandler","infoModalHandler","window","location","reload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.948ed82c.chunk.js","sourcesContent":["// @flow\nexport const cleanLyric = (lyric: string): string => {\n  // Replace special quotes with normal quotes\n  let cleaned_lyric = lyric.replace(/\\u2018|\\u2019/g, \"'\");\n  cleaned_lyric = cleaned_lyric.replace(/\\u201C|\\u201D/g, '\"');\n  // Replace special unicode spaces with standard space\n  cleaned_lyric = cleaned_lyric.replace(\n    /[\\u00A0\\u1680​\\u180e\\u2000-\\u2009\\u200a​\\u200b​\\u202f\\u205f​\\u3000]/g,\n    \" \"\n  );\n  // Replace dashes with space and single hyphen\n  cleaned_lyric = cleaned_lyric.replace(/\\u2013|\\u2014/g, \" - \");\n  // Replace cyrillic + accented Es with normal Es\n  cleaned_lyric = cleaned_lyric.replace(/\\u0435/g, \"e\");\n  return cleaned_lyric;\n};\n\nexport const containsQuery = (lyric: string, query: string): number => {\n  query = cleanLyric(query.toLowerCase());\n  query = query.replace(/\\u00e9/g, \"e\");\n  lyric = lyric.replace(/\\u00e9/g, \"e\");\n  const regex = new RegExp(\n    `([\\\\(\\\\)\\\\.\\\\-?!;:,\\\\s\\u2026\"]|^)${query}([\\\\(\\\\)\\\\.\\\\-?!;:,\\\\s\\u2026\"]|$)`\n  );\n  return cleanLyric(lyric.toLowerCase()).search(regex);\n};\n\nexport const isMobile = (): boolean => {\n  const mobileRegex = new RegExp(\n    `Android|webOS|iPhone|iPad|BlackBerry|Phone|Mobile`\n  );\n  return navigator.userAgent.search(mobileRegex) >= 0;\n};\n","// @flow\nimport \"../style/InputBox.css\";\nimport { isMobile } from \"./utils\";\nimport React from \"react\";\n\nconst mobile = isMobile();\n\ntype InputBoxProps = {\n  submitHandler: (string) => void,\n};\ntype InputBoxState = {\n  query: ?string,\n};\n\nclass InputBox extends React.Component<InputBoxProps, InputBoxState> {\n  constructor() {\n    super();\n    this.state = {\n      query: undefined,\n    };\n    // NOTE(shayna): this is a workaround for flow\n    (this: any).handleChange = this.handleChange.bind(this);\n    (this: any).handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event: any) {\n    this.setState({ query: event.target.value });\n  }\n\n  handleSubmit(event: any) {\n    if (this.state.query) this.props.submitHandler(this.state.query.trim());\n    event.preventDefault();\n  }\n\n  render(): any {\n    return (\n      <div className=\"InputBox\">\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            <input\n              className={mobile ? \"queryBox queryBox-mobile\" : \"queryBox\"}\n              type=\"text\"\n              value={this.state.query}\n              onChange={this.handleChange}\n            />\n          </label>\n          <input className=\"submitButton\" type=\"submit\" value=\"➔\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default InputBox;\n","// @flow\nimport \"../style/SongLyric.css\";\nimport { containsQuery, cleanLyric } from \"./utils.js\";\nimport React from \"react\";\n\ntype SongLyricProps = {\n  album: string,\n  song: string,\n  prev: string,\n  lyric: string,\n  next: string,\n  query: string,\n};\n\nclass SongLyric extends React.Component<SongLyricProps> {\n  boldQuery(lyric: string, query: string): string {\n    lyric = cleanLyric(lyric);\n    query = cleanLyric(query);\n    let start: number, end: number;\n    let boldedLyric = \"\";\n    do {\n      start = containsQuery(lyric, query);\n      if (start === -1) {\n        return boldedLyric + lyric;\n      }\n      end = start + query.length;\n      // If not at the beginning, we need to shift start and end\n      // because containsQuery will return the index of the space\n      // before the start of the query\n      if (lyric.toLowerCase().charAt(0) !== query.toLowerCase().charAt(0)) {\n        start += 1;\n        end += 1;\n      }\n      boldedLyric =\n        boldedLyric +\n        lyric.substring(0, start) +\n        '<span class=\"query\">' +\n        lyric.substring(start, end) +\n        \"</span>\";\n      lyric = lyric.substring(end);\n    } while (lyric.length > 0);\n    return boldedLyric;\n  }\n\n  render(): any {\n    return (\n      <div className=\"SongLyric\">\n        <p>\n          {this.props.prev}\n          {this.props.prev.length > 0 ? <br /> : \"\"}\n          <span\n            className=\"lyric\"\n            dangerouslySetInnerHTML={{\n              __html: this.boldQuery(this.props.lyric, this.props.query),\n            }}\n          />\n          {this.props.next.length > 0 ? <br /> : \"\"}\n          {this.props.next}\n        </p>\n        {this.props.song}, <i>{this.props.album}</i>\n        <hr></hr>\n      </div>\n    );\n  }\n}\n\nexport default SongLyric;\n","// @flow\nimport \"../style/QueriedLyrics.css\";\nimport React from \"react\";\nimport SongLyric from \"./SongLyric\";\nimport { containsQuery, isMobile } from \"./utils.js\";\n\nconst lyricsJSON = require(\"../taylor-swift-lyrics/lyrics.json\");\nconst mobile = isMobile();\ntype QueriedLyricsProps = {\n  query: string,\n};\n\ntype QueriedLyricsState = {\n  occurrences: number,\n};\n\nclass QueriedLyrics extends React.Component<\n  QueriedLyricsProps,\n  QueriedLyricsState\n> {\n  constructor(props: QueriedLyricsProps) {\n    super(props);\n    this.state = {\n      occurrences: 0,\n    };\n  }\n\n  componentDidMount(): any {\n    this.setState({\n      occurrences: document.querySelectorAll(\".query\").length,\n    });\n  }\n\n  componentDidUpdate(): any {\n    const occurrences = document.querySelectorAll(\".query\").length;\n    if (this.state.occurrences != occurrences) {\n      this.setState({\n        occurrences: occurrences,\n      });\n    }\n  }\n\n  render(): any {\n    return (\n      <div>\n        <div className={mobile ? \"QueriedLyrics-mobile\" : \"QueriedLyrics\"}>\n          {Object.keys(lyricsJSON).map((album) =>\n            Object.keys(lyricsJSON[album]).map((song) =>\n              lyricsJSON[album][song].map((songLyric) => {\n                if (containsQuery(songLyric.lyric, this.props.query) >= 0 && album !== \"Uncategorized\") {\n                  return (\n                    <SongLyric\n                      album={album}\n                      song={song}\n                      lyric={songLyric.lyric}\n                      next={songLyric.next}\n                      prev={songLyric.prev}\n                      query={this.props.query}\n                    />\n                  );\n                }\n              })\n            )\n          )}\n        </div>\n        <div className={mobile ? \"totalResults-mobile\" : \"totalResults\"}>\n          Total usages found: {this.state.occurrences}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default QueriedLyrics;\n","// @flow\nimport \"../style/InfoButton.css\";\nimport React from \"react\";\n\ntype InfoButtonProps = {\n  handler: (any) => void,\n};\n\nclass InfoButton extends React.Component<InfoButtonProps> {\n  render(): any {\n    return (\n      <div className=\"InfoButton\" onClick={this.props.handler}>\n        ?\n      </div>\n    );\n  }\n}\n\nexport default InfoButton;\n","// @flow\nimport \"../style/InfoModal.css\";\nimport { isMobile } from \"./utils\";\nimport React from \"react\";\n\nconst mobile = isMobile();\n\ntype InfoModalProps = {\n  handler: () => void,\n  display: boolean,\n};\n\ntype InfoModalState = {\n  faded: boolean,\n};\n\nclass InfoModal extends React.Component<InfoModalProps, InfoModalState> {\n  constructor(props: InfoModalProps): void {\n    super(props);\n    this.state = {\n      faded: false,\n    };\n    (this: any).clickOutHandler = this.clickOutHandler.bind(this);\n  }\n\n  clickOutHandler(event: any): void {\n    if (event.target.className !== \"ModalBox\") {\n      this.props.handler();\n    }\n  }\n\n  render(): any {\n    return (\n      <div\n        className=\"InfoModal\"\n        onClick={this.clickOutHandler}\n        style={{ display: this.props.display ? \"block\" : \"none\" }}\n      >\n        <div className={mobile ? \"ModalBox ModalBox-mobile\" : \"ModalBox\"}>\n          <p>\n            Search for a word or a phrase and see all the places Taylor Swift\n            has used it in her music! Currently, this searcher does not support\n            different forms of words (e.g. you must make separate queries for\n            \"rain\" and \"raining\"). Additionally, lines that repeat with the same\n            lines before and after them have been removed from data, so counts\n            may not be 100% accurate for more common words. A few songs are\n            missing from our dataset -- this is a known issue!\n          </p>\n          <p style={{ \"font-size\": \"14px\" }}>\n            Made by&nbsp;<a href=\"http://shaynak.github.io\">Shayna Kothari</a>\n            &nbsp;using&nbsp;\n            <a href=\"http://reactjs.org\">React</a>. Lyrics scraped from&nbsp;\n            <a href=\"http://genius.com\">Genius</a>&nbsp; using&nbsp;\n            <a href=\"https://github.com/johnwmillr/LyricsGenius\">\n              LyricsGenius\n            </a>\n            . Scraped data can be found&nbsp;\n            <a href=\"https://github.com/shaynak/taylor-swift-lyrics\">here</a>.\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default InfoModal;\n","// @flow\nimport \"../style/index.css\";\nimport \"../style/App.css\";\nimport InputBox from \"./InputBox\";\nimport QueriedLyrics from \"./QueriedLyrics\";\nimport InfoButton from \"./InfoButton\";\nimport InfoModal from \"./InfoModal\";\nimport { isMobile } from \"./utils\";\nimport React from \"react\";\n\nconst mobile = isMobile();\ntype AppState = {\n  queried: boolean,\n  query: ?string,\n  modal: boolean,\n};\n\nclass App extends React.Component<{}, AppState> {\n  constructor() {\n    super();\n    this.state = {\n      queried: false,\n      query: undefined,\n      modal: false,\n    };\n    // NOTE(shayna): this is a workaround for flow\n    (this: any).searchHandler = this.searchHandler.bind(this);\n    (this: any).infoButtonHandler = this.infoButtonHandler.bind(this);\n    (this: any).infoModalHandler = this.infoModalHandler.bind(this);\n  }\n\n  searchHandler(query: string) {\n    this.setState({\n      queried: true,\n      query: query,\n    });\n  }\n\n  infoButtonHandler() {\n    this.setState({\n      modal: true,\n    });\n  }\n\n  infoModalHandler() {\n    this.setState({\n      modal: false,\n    });\n  }\n\n  render(): any {\n    return (\n      <div className=\"App\">\n        <InfoModal handler={this.infoModalHandler} display={this.state.modal} />\n        {this.state.queried && this.state.query ? (\n          <div className=\"top-title\">\n            <span\n              className={mobile ? \"top-text-mobile header\" : \"top-text header\"}\n              onClick={(event) => window.location.reload()}\n            >\n              taylor swift lyric searcher\n            </span>\n          </div>\n        ) : (\n          <div className=\"title\">\n            <span\n              className={\n                mobile ? \"title-text-mobile header\" : \"title-text header\"\n              }\n            >\n              taylor swift <br /> lyric searcher\n            </span>\n          </div>\n        )}\n        <InputBox submitHandler={this.searchHandler} />\n        {this.state.queried && this.state.query ? (\n          <QueriedLyrics query={this.state.query} />\n        ) : (\n          \"\"\n        )}\n        <InfoButton handler={this.infoButtonHandler}></InfoButton>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
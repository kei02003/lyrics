{"version":3,"sources":["components/InputBox.js","components/utils.js","components/SongLyric.js","components/QueriedLyrics.js","components/App.js","reportWebVitals.js","index.js"],"names":["InputBox","state","query","undefined","handleChange","bind","handleSubmit","event","this","setState","target","value","trim","props","submitHandler","preventDefault","className","onSubmit","type","onChange","React","Component","containsQuery","lyric","toLowerCase","regex","RegExp","search","SongLyric","start","end","length","substring","prev","class","dangerouslySetInnerHTML","__html","boldQuery","next","song","album","lyricsJSON","require","QueriedLyrics","Object","keys","map","songLyric","App","queried","searchHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3704beab.chunk.js","sourcesContent":["// @flow\nimport '../style/InputBox.css';\nimport React from 'react';\n\ntype InputBoxProps = {\n  submitHandler: (string) => void,\n}\ntype InputBoxState = {\n  query: ?string,\n}\n\nclass InputBox extends React.Component<InputBoxProps, InputBoxState> {\n  constructor() {\n    super();\n    this.state = {\n      query: undefined,\n    };\n    // NOTE(shayna): this is a workaround for flow\n    (this: any).handleChange = this.handleChange.bind(this);\n    (this: any).handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event: any) {\n    this.setState({ query: event.target.value.trim() });\n  }\n\n  handleSubmit(event: any) {\n    if (this.state.query) this.props.submitHandler(this.state.query.trim());\n    event.preventDefault();\n  }\n\n  render(): any {\n    return (\n      <div className=\"InputBox\">\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            Word:\n                  <input type=\"text\" value={this.state.query} onChange={this.handleChange} />\n          </label>\n          <input type=\"submit\" value=\"Go\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default InputBox;\n","// @flow\nexport const containsQuery = (lyric: string, query: string): number => {\n    query = query.toLowerCase();\n    const regex = new RegExp(`([\\\\.-?!,\\\\s]+|^)${query}([\\\\.-?!,\\\\s]+|$)`);\n    return lyric.toLowerCase().search(regex);\n}\n","// @flow\nimport '../style/SongLyric.css';\nimport { containsQuery } from './utils.js';\nimport React from 'react';\n\ntype SongLyricProps = {\n    album: string,\n    song: string,\n    prev: string,\n    lyric: string,\n    next: string,\n    query: string,\n}\n\nclass SongLyric extends React.Component<SongLyricProps> {\n    boldQuery(lyric: string, query: string): string {\n        const start = containsQuery(lyric, query);\n        // This case should never be hit, since a SongLyric \n        // is only created if it contains the query\n        if (start === -1) {\n            return \"\";\n        }\n        const end = start + query.length + 1;\n        const left = this.props.lyric.substring(0, start);\n        const foundQuery = this.props.lyric.substring(start, end);\n        const right = this.props.lyric.substring(end);\n        return left + \"<b>\" + foundQuery + \"</b>\" + right;\n    }\n\n    render(): any {\n        return (\n            <div className=\"SongLyric\">\n                <p>\n                    {this.props.prev}\n                    <br />\n                    <span class=\"lyric\" dangerouslySetInnerHTML={{ __html: this.boldQuery(this.props.lyric, this.props.query) }} />\n                    <br />\n                    {this.props.next}\n                </p>\n                {this.props.song}, <i>{this.props.album}</i>\n                <hr></hr>\n            </div>\n        );\n    }\n}\n\nexport default SongLyric;\n","// @flow\nimport React from 'react';\nimport SongLyric from './SongLyric';\nimport { containsQuery } from './utils.js';\n\nconst lyricsJSON = require('../taylor-swift-lyrics/lyrics.json');\n\ntype QueriedLyricsProps = {\n    query: string\n}\n\nclass QueriedLyrics extends React.Component<QueriedLyricsProps> {\n    render(): any {\n        return (\n            <div className=\"QueriedLyrics\">\n                {\n                    Object.keys(lyricsJSON).map(album =>\n                        Object.keys(lyricsJSON[album]).map(song =>\n                            lyricsJSON[album][song].map(songLyric => {\n                                if (containsQuery(songLyric.lyric, this.props.query) >= 0) {\n                                    return (<SongLyric album={album} song={song} lyric={songLyric.lyric} next={songLyric.next} prev={songLyric.prev} query={this.props.query} />);\n                                }\n                            })\n                        )\n                    )\n                }\n            </div>\n        );\n    }\n}\n\nexport default QueriedLyrics;\n","// @flow\nimport '../style/App.css';\nimport InputBox from './InputBox';\nimport QueriedLyrics from './QueriedLyrics';\nimport React from 'react';\n\ntype AppState = {\n  queried: bool,\n  query: ?string,\n};\n\nclass App extends React.Component<{}, AppState> {\n  constructor() {\n    super();\n    this.state = {\n      queried: false,\n      query: undefined,\n    };\n    // NOTE(shayna): this is a workaround for flow\n    (this: any).searchHandler = this.searchHandler.bind(this);\n  }\n\n  searchHandler(query: string) {\n    this.setState({\n      queried: true,\n      query: query,\n    });\n  }\n\n  render(): any {\n    if (this.state.queried && this.state.query) {\n      return (<div className=\"App\">\n        <InputBox submitHandler={this.searchHandler} />\n        <QueriedLyrics query={this.state.query} />\n      </div>);\n    } else {\n      return (<div className=\"App\">\n        <InputBox submitHandler={this.searchHandler} />\n      </div>);\n    }\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
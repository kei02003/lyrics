{"version":3,"sources":["components/utils.js","components/InputBox.js","components/SongLyric.js","components/QueriedLyrics.js","components/InfoButton.js","components/constants.js","components/InfoModal.js","components/App.js","reportWebVitals.js","index.js"],"names":["cleanLyric","lyric","cleaned_lyric","replace","containsQuery","query","toLowerCase","regex","RegExp","search","queriesFound","start","found","substring","length","isMobile","mobileRegex","navigator","userAgent","boldQuery","end","boldedLyric","charAt","mobile","InputBox","submitHandler","useState","setQuery","className","onSubmit","event","trim","preventDefault","type","value","onChange","target","SongLyric","album","song","prev","next","dangerouslySetInnerHTML","__html","lyricsJSON","require","QueriedLyrics","counter","Object","keys","sort","album1","album2","map","songLyric","nextLyric","i","multiplicity","countOccurrences","InfoButton","handler","onClick","ArtistName","InfoModal","display","style","fontSize","href","App","queried","setQueried","modal","setModal","window","location","reload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9243974.chunk.js","sourcesContent":["// @flow\n\n// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping\nconst escapeRegExp = (str: string): string => {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n};\n\nconst cleanLyric = (lyric: string): string => {\n  // Replace special quotes with normal quotes\n  let cleaned_lyric = lyric.replace(/\\u2018|\\u2019/g, \"'\");\n  cleaned_lyric = cleaned_lyric.replace(/\\u201C|\\u201D/g, '\"');\n  // Replace special unicode spaces with standard space\n  cleaned_lyric = cleaned_lyric.replace(\n    /[\\u00A0\\u1680​\\u180e\\u2000-\\u2009\\u200a​\\u200b​\\u202f\\u205f​\\u3000]/g,\n    \" \"\n  );\n  // Replace dashes with space and single hyphen\n  cleaned_lyric = cleaned_lyric.replace(/\\u2013|\\u2014/g, \" - \");\n  // Replace cyrillic + accented Es with normal Es\n  cleaned_lyric = cleaned_lyric.replace(/\\u0435/g, \"e\");\n  return cleaned_lyric;\n};\n\nexport const containsQuery = (lyric: string, query: string): number => {\n  query = cleanLyric(query.toLowerCase());\n  query = query.replace(/\\u00e9/g, \"e\");\n  lyric = lyric.replace(/\\u00e9/g, \"e\");\n  const regex = new RegExp(\n    `([\\\\(\\\\)\\\\.\\\\-?!;:,\\\\s\\u2026\"]|^)${escapeRegExp(\n      query\n    )}([\\\\(\\\\)\\\\.\\\\-?!;:,\\\\s\\u2026\"]|$)`\n  );\n  return cleanLyric(lyric.toLowerCase()).search(regex);\n};\n\nexport const queriesFound = (lyric: string, query: string): number => {\n  lyric = cleanLyric(lyric);\n  query = cleanLyric(query);\n  let start: number;\n  let found = 0;\n  do {\n    start = containsQuery(lyric, query);\n    if (start === -1) {\n      return found;\n    }\n    found += 1;\n    lyric = lyric.substring(start + query.length);\n  } while (lyric.length > 0);\n  return found;\n};\n\nexport const isMobile = (): boolean => {\n  const mobileRegex = new RegExp(\n    `Android|webOS|iPhone|iPad|BlackBerry|Phone|Mobile`\n  );\n  return navigator.userAgent.search(mobileRegex) >= 0;\n};\n\nexport const boldQuery = (lyric: string, query: string): string => {\n  lyric = cleanLyric(lyric);\n  query = cleanLyric(query);\n  let start: number, end: number;\n  let boldedLyric = \"\";\n  do {\n    start = containsQuery(lyric, query);\n    if (start === -1) {\n      return boldedLyric + lyric;\n    }\n    end = start + query.length;\n    // If not at the beginning, we need to shift start and end\n    // because containsQuery will return the index of the space\n    // before the start of the query\n    if (lyric.toLowerCase().charAt(0) !== query.toLowerCase().charAt(0)) {\n      start += 1;\n      end += 1;\n    }\n    boldedLyric =\n      boldedLyric +\n      lyric.substring(0, start) +\n      '<span class=\"query\">' +\n      lyric.substring(start, end) +\n      \"</span>\";\n    lyric = lyric.substring(end);\n  } while (lyric.length > 0);\n  return boldedLyric;\n};\n","// @flow\nimport \"../style/InputBox.css\";\nimport { isMobile } from \"./utils\";\nimport React, { useState } from \"react\";\n\nconst mobile = isMobile();\n\ntype InputBoxProps = {\n  submitHandler: (string) => void,\n};\n\nexport default function InputBox({\n  submitHandler,\n}: InputBoxProps): React$MixedElement {\n  const [query, setQuery] = useState<string>(\"\");\n\n  const handleChange = (event: any) => {\n    setQuery(event.target.value);\n  };\n\n  const handleSubmit = (event: any) => {\n    if (query !== \"\") submitHandler(query.trim());\n    event.preventDefault();\n  };\n\n  return (\n    <div className=\"InputBox\">\n      <form onSubmit={handleSubmit}>\n        <label>\n          <input\n            className={mobile ? \"queryBox queryBox-mobile\" : \"queryBox\"}\n            type=\"text\"\n            value={query}\n            onChange={handleChange}\n          />\n        </label>\n        <input className=\"submitButton\" type=\"submit\" value=\"➔\" />\n      </form>\n    </div>\n  );\n}\n","// @flow\nimport \"../style/SongLyric.css\";\nimport { boldQuery } from \"./utils.js\";\nimport React from \"react\";\n\ntype SongLyricProps = {\n  album: string,\n  song: string,\n  prev: string,\n  lyric: string,\n  next: string,\n  query: string,\n};\n\nexport default function SongLyric({\n  album,\n  song,\n  prev,\n  lyric,\n  next,\n  query,\n}: SongLyricProps): React$MixedElement {\n  return (\n    <div className=\"SongLyric\">\n      <p>\n        {prev}\n        {prev.length > 0 ? <br /> : \"\"}\n        <span\n          className=\"lyric\"\n          dangerouslySetInnerHTML={{\n            __html: boldQuery(lyric, query),\n          }}\n        />\n        {next.length > 0 ? <br /> : \"\"}\n        {next}\n      </p>\n      {song}\n      {album !== \"NaN\" ? \",\" : \"\"} <i>{album !== \"NaN\" ? album : \"\"}</i>\n      <hr></hr>\n    </div>\n  );\n}\n","// @flow\nimport \"../style/QueriedLyrics.css\";\nimport React from \"react\";\nimport SongLyric from \"./SongLyric\";\nimport { containsQuery, isMobile, queriesFound } from \"./utils.js\";\n\nconst lyricsJSON = require(\"../taylor-swift-lyrics/lyrics.json\");\nconst mobile = isMobile();\ntype QueriedLyricsProps = {\n  query: string,\n};\n\nexport default function QueriedLyrics({\n  query,\n}: QueriedLyricsProps): React$MixedElement {\n  const countOccurrences = (): number => {\n    let found = 0;\n    for (const album in lyricsJSON) {\n      if (album !== \"Uncategorized\") {\n        for (const song in lyricsJSON[album]) {\n          for (let i = 0; i < lyricsJSON[album][song].length; i++) {\n            const songLyric = lyricsJSON[album][song][i];\n            found +=\n              songLyric.multiplicity * queriesFound(songLyric.lyric, query);\n          }\n        }\n      }\n    }\n    return found;\n  };\n\n  let counter = 0;\n  return (\n    <div>\n      <div className={mobile ? \"QueriedLyrics-mobile\" : \"QueriedLyrics\"}>\n        {Object.keys(lyricsJSON)\n          .sort((album1, album2) => {\n            if (album1 === \"Unreleased Songs\") {\n              return 1;\n            } else if (album2 === \"Unreleased Songs\") {\n              return -1;\n            }\n            return 0;\n          })\n          .map((album) =>\n            Object.keys(lyricsJSON[album]).map((song) =>\n              lyricsJSON[album][song].map((songLyric) => {\n                counter++;\n                if (\n                  containsQuery(songLyric.lyric, query) >= 0 &&\n                  album !== \"Uncategorized\"\n                ) {\n                  // Temporary fix because get_lyric_list in scraper.py is failing at this\n                  const nextLyric =\n                    songLyric.next[0] === \"[\" ? \"\" : songLyric.next;\n                  return (\n                    <SongLyric\n                      key={counter}\n                      album={album}\n                      song={song}\n                      lyric={songLyric.lyric}\n                      next={nextLyric}\n                      prev={songLyric.prev}\n                      query={query}\n                    />\n                  );\n                }\n                return <></>;\n              })\n            )\n          )}\n      </div>\n      <div className={mobile ? \"totalResults-mobile\" : \"totalResults\"}>\n        Total usages found: {countOccurrences()}\n      </div>\n    </div>\n  );\n}\n","// @flow\nimport \"../style/InfoButton.css\";\nimport React from \"react\";\n\ntype InfoButtonProps = {\n  handler: (any) => void,\n};\n\nexport default function InfoButton({\n  handler,\n}: InfoButtonProps): React$MixedElement {\n  return (\n    <div className=\"InfoButton\" onClick={handler}>\n      ?\n    </div>\n  );\n}\n","// @flow\nexport const ArtistName = \"taylor swift\";\n\nexport const ModalText =\n  'Search for a word or a phrase and see all the places Taylor Swift \\\n  has used it in her music! Currently, this searcher does not support \\\n  different forms of words (e.g. you must make separate queries for \\\n  \"rain\" and \"raining\"). Scraped data can be found \\\n  <a href=\"https://github.com/shaynak/taylor-swift-lyrics\">here</a>. \\\n  Last update: 10/5/21.';\n","// @flow\nimport \"../style/InfoModal.css\";\nimport { isMobile } from \"./utils\";\nimport { ModalText } from \"./constants\";\nimport React from \"react\";\n\nconst mobile = isMobile();\n\ntype InfoModalProps = {\n  handler: () => void,\n  display: boolean,\n};\n\nexport default function InfoModal({\n  handler,\n  display,\n}: InfoModalProps): React$MixedElement {\n  const clickOutHandler = (event: any) => {\n    if (event.target.className !== \"ModalBox\") {\n      handler();\n    }\n  };\n\n  return (\n    <div\n      className=\"InfoModal\"\n      onClick={clickOutHandler}\n      style={{ display: display ? \"block\" : \"none\" }}\n    >\n      <div className={mobile ? \"ModalBox ModalBox-mobile\" : \"ModalBox\"}>\n        <p dangerouslySetInnerHTML={{ __html: ModalText }} />\n        {/** CREDITS: Please do not edit this. Feel free to add your own credits to ModalText. */}\n        <p style={{ fontSize: \"14px\" }}>\n          Made by&nbsp;<a href=\"http://shaynak.github.io\">Shayna Kothari</a>\n          &nbsp;using&nbsp;\n          <a href=\"http://reactjs.org\">React</a>. Lyrics scraped from&nbsp;\n          <a href=\"http://genius.com\">Genius</a>&nbsp; using&nbsp;\n          <a href=\"https://github.com/johnwmillr/LyricsGenius\">LyricsGenius</a>.\n          If you have comments or suggestions, contact me by{\" \"}\n          <a href=\"mailto:shayna.kothari@berkeley.edu\">email</a> or find me on{\" \"}\n          <a href=\"http://twitter.com/shaynapping\">Twitter</a>!\n        </p>\n      </div>\n    </div>\n  );\n}\n","// @flow\nimport \"../style/index.css\";\nimport \"../style/App.css\";\nimport InputBox from \"./InputBox\";\nimport QueriedLyrics from \"./QueriedLyrics\";\nimport InfoButton from \"./InfoButton\";\nimport InfoModal from \"./InfoModal\";\nimport { isMobile } from \"./utils\";\nimport { ArtistName } from \"./constants\";\nimport React, { useState } from \"react\";\n\nconst mobile = isMobile();\n\nfunction App(): React$MixedElement {\n  const [queried, setQueried] = useState<boolean>(false);\n  const [query, setQuery] = useState<string>(\"\");\n  const [modal, setModal] = useState<boolean>(false);\n\n  const searchHandler = (query: string) => {\n    setQueried(true);\n    setQuery(query);\n  };\n  const infoButtonHandler = () => setModal(true);\n  const infoModalHandler = () => setModal(false);\n\n  return (\n    <div className=\"App\">\n      <InfoModal handler={infoModalHandler} display={modal} />\n      {queried && query !== \"\" ? (\n        <div className=\"top-title\">\n          <span\n            className={mobile ? \"top-text-mobile header\" : \"top-text header\"}\n            onClick={(event) => window.location.reload()}\n          >\n            {ArtistName} lyric searcher\n          </span>\n        </div>\n      ) : (\n        <div className=\"title\">\n          <span\n            className={\n              mobile ? \"title-text-mobile header\" : \"title-text header\"\n            }\n          >\n            {ArtistName} <br /> lyric searcher\n          </span>\n        </div>\n      )}\n      <InputBox submitHandler={searchHandler} />\n      {queried && query !== \"\" ? <QueriedLyrics query={query} /> : \"\"}\n      <InfoButton handler={infoButtonHandler}></InfoButton>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["components/InputBox.js","components/utils.js","components/SongLyric.js","components/QueriedLyrics.js","components/App.js","reportWebVitals.js","index.js"],"names":["InputBox","state","query","undefined","handleChange","bind","handleSubmit","event","this","setState","target","value","props","submitHandler","trim","preventDefault","className","onSubmit","type","onChange","React","Component","cleanLyric","lyric","cleaned_lyric","replace","containsQuery","toLowerCase","regex","RegExp","search","SongLyric","start","end","boldedLyric","length","charAt","substring","prev","class","dangerouslySetInnerHTML","__html","boldQuery","next","song","album","lyricsJSON","require","QueriedLyrics","Object","keys","map","songLyric","App","queried","searchHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77e14119.chunk.js","sourcesContent":["// @flow\nimport '../style/InputBox.css';\nimport React from 'react';\n\ntype InputBoxProps = {\n  submitHandler: (string) => void,\n}\ntype InputBoxState = {\n  query: ?string,\n}\n\nclass InputBox extends React.Component<InputBoxProps, InputBoxState> {\n  constructor() {\n    super();\n    this.state = {\n      query: undefined,\n    };\n    // NOTE(shayna): this is a workaround for flow\n    (this: any).handleChange = this.handleChange.bind(this);\n    (this: any).handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event: any) {\n    this.setState({ query: event.target.value });\n  }\n\n  handleSubmit(event: any) {\n    if (this.state.query) this.props.submitHandler(this.state.query.trim());\n    event.preventDefault();\n  }\n\n  render(): any {\n    return (\n      <div className=\"InputBox\">\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            Word:\n                  <input type=\"text\" value={this.state.query} onChange={this.handleChange} />\n          </label>\n          <input type=\"submit\" value=\"Go\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default InputBox;\n","// @flow\nexport const cleanLyric = (lyric: string): string => {\n    // Replace special quotes with normal quotes\n    let cleaned_lyric = lyric.replace(/\\u2018|\\u2019/g, \"'\");\n    cleaned_lyric = cleaned_lyric.replace(/\\u201C|\\u201D/g, '\"');\n    // Replace special unicode spaces with standard space\n    cleaned_lyric = cleaned_lyric.replace(\n        /[\\u00A0\\u1680​\\u180e\\u2000-\\u2009\\u200a​\\u200b​\\u202f\\u205f​\\u3000]/g,\n        \" \");\n    // Replace dashes with space and single hyphen\n    cleaned_lyric = cleaned_lyric.replace(/\\u2013|\\u2014/g, \" - \");\n    return cleaned_lyric;\n}\n\nexport const containsQuery = (lyric: string, query: string): number => {\n    query = cleanLyric(query.toLowerCase());\n    const regex = new RegExp(`([\\\\(\\\\)\\\\.\\\\-?!;:,\\\\s]|^)${query}([\\\\(\\\\)\\\\.\\\\-?!;:,\\\\s]|$)`);\n    return cleanLyric(lyric.toLowerCase()).search(regex);\n}\n","// @flow\nimport '../style/SongLyric.css';\nimport { containsQuery, cleanLyric } from './utils.js';\nimport React from 'react';\n\ntype SongLyricProps = {\n    album: string,\n    song: string,\n    prev: string,\n    lyric: string,\n    next: string,\n    query: string,\n}\n\nclass SongLyric extends React.Component<SongLyricProps> {\n    boldQuery(lyric: string, query: string): string {\n        lyric = cleanLyric(lyric);\n        query = cleanLyric(query);\n        let start: number, end: number;\n        let boldedLyric = \"\";\n        do {\n            start = containsQuery(lyric, query);\n            if (start === -1) {\n                return boldedLyric + lyric;\n            }\n            end = start + query.length;\n            // If not at the beginning, we need to shift start and end\n            // because containsQuery will return the index of the space\n            // before the start of the query\n            if (lyric.toLowerCase().charAt(0) !== query.toLowerCase().charAt(0)) {\n                start += 1;\n                end += 1;\n            }\n            boldedLyric = boldedLyric + lyric.substring(0, start) + '<span class=\"query\">' + lyric.substring(start, end) + \"</span>\";\n            lyric = lyric.substring(end);\n        } while (lyric.length > 0);\n        return boldedLyric;\n    }\n\n    render(): any {\n        return (\n            <div className=\"SongLyric\">\n                <p>\n                    {this.props.prev}\n                    <br />\n                    <span class=\"lyric\" dangerouslySetInnerHTML={{ __html: this.boldQuery(this.props.lyric, this.props.query) }} />\n                    <br />\n                    {this.props.next}\n                </p>\n                {this.props.song}, <i>{this.props.album}</i>\n                <hr></hr>\n            </div>\n        );\n    }\n}\n\nexport default SongLyric;\n","// @flow\nimport React from 'react';\nimport SongLyric from './SongLyric';\nimport { containsQuery } from './utils.js';\n\nconst lyricsJSON = require('../taylor-swift-lyrics/lyrics.json');\n\ntype QueriedLyricsProps = {\n    query: string\n}\n\nclass QueriedLyrics extends React.Component<QueriedLyricsProps> {\n    render(): any {\n        return (\n            <div className=\"QueriedLyrics\">\n                {\n                    Object.keys(lyricsJSON).map(album =>\n                        Object.keys(lyricsJSON[album]).map(song =>\n                            lyricsJSON[album][song].map(songLyric => {\n                                if (containsQuery(songLyric.lyric, this.props.query) >= 0) {\n                                    return (<SongLyric album={album} song={song} lyric={songLyric.lyric} next={songLyric.next} prev={songLyric.prev} query={this.props.query} />);\n                                }\n                            })\n                        )\n                    )\n                }\n            </div>\n        );\n    }\n}\n\nexport default QueriedLyrics;\n","// @flow\nimport '../style/App.css';\nimport InputBox from './InputBox';\nimport QueriedLyrics from './QueriedLyrics';\nimport React from 'react';\n\ntype AppState = {\n  queried: bool,\n  query: ?string,\n};\n\nclass App extends React.Component<{}, AppState> {\n  constructor() {\n    super();\n    this.state = {\n      queried: false,\n      query: undefined,\n    };\n    // NOTE(shayna): this is a workaround for flow\n    (this: any).searchHandler = this.searchHandler.bind(this);\n  }\n\n  searchHandler(query: string) {\n    this.setState({\n      queried: true,\n      query: query,\n    });\n  }\n\n  render(): any {\n    if (this.state.queried && this.state.query) {\n      return (<div className=\"App\">\n        <InputBox submitHandler={this.searchHandler} />\n        <QueriedLyrics query={this.state.query} />\n      </div>);\n    } else {\n      return (<div className=\"App\">\n        <InputBox submitHandler={this.searchHandler} />\n      </div>);\n    }\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
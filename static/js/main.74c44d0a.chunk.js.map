{"version":3,"sources":["components/InputBox.js","components/SongLyric.js","components/QueriedLyrics.js","components/App.js","reportWebVitals.js","index.js"],"names":["InputBox","state","query","undefined","handleChange","bind","handleSubmit","event","this","setState","target","value","trim","props","submitHandler","preventDefault","className","onSubmit","type","onChange","React","Component","SongLyric","prev","lyric","next","song","album","lyricsJSON","require","QueriedLyrics","regex","RegExp","console","log","search","Object","keys","map","songLyric","containsQuery","App","queried","searchHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4tsqCA8CeA,G,8DAlCb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,WAAOC,GAGT,eAAYC,aAAe,EAAKA,aAAaC,KAAlB,gBAC3B,eAAYC,aAAe,EAAKA,aAAaD,KAAlB,gBAPf,E,yDAUDE,GACXC,KAAKC,SAAS,CAAEP,MAAOK,EAAMG,OAAOC,MAAMC,W,mCAG/BL,GACPC,KAAKP,MAAMC,OAAOM,KAAKK,MAAMC,cAAcN,KAAKP,MAAMC,MAAMU,QAChEL,EAAMQ,mB,+BAIN,OACE,qBAAKC,UAAU,WAAf,SACE,uBAAMC,SAAUT,KAAKF,aAArB,UACE,0CAEQ,uBAAOY,KAAK,OAAOP,MAAOH,KAAKP,MAAMC,MAAOiB,SAAUX,KAAKJ,kBAEnE,uBAAOc,KAAK,SAASP,MAAM,gB,GA5BdS,IAAMC,YCkBdC,E,uKAhBP,OACI,sBAAKN,UAAU,YAAf,UACI,8BACKR,KAAKK,MAAMU,KACZ,uBACCf,KAAKK,MAAMW,MACZ,uBACChB,KAAKK,MAAMY,QAEfjB,KAAKK,MAAMa,KARhB,KAQuB,4BAAIlB,KAAKK,MAAMc,QAClC,8B,GAZQP,IAAMC,WCPxBO,EAAaC,EAAQ,IAiCZC,E,4KA1BGN,GACV,IAAMtB,EAAQM,KAAKK,MAAMX,MACnB6B,EAAQ,IAAIC,OAAJ,0BAA8B9B,EAA9B,qBAEd,OADA+B,QAAQC,IAAIH,GACJP,EAAMW,OAAOJ,IAAU,I,+BAGpB,IAAD,OACV,OACI,qBAAKf,UAAU,gBAAf,SAEQoB,OAAOC,KAAKT,GAAYU,KAAI,SAAAX,GAAK,OAC7BS,OAAOC,KAAKT,EAAWD,IAAQW,KAAI,SAAAZ,GAAI,OACnCE,EAAWD,GAAOD,GAAMY,KAAI,SAAAC,GACxB,GAAI,EAAKC,cAAcD,EAAUf,OAC7B,OAAQ,cAAC,EAAD,CAAWG,MAAOA,EAAOD,KAAMA,EAAMF,MAAOe,EAAUf,MAAOC,KAAMc,EAAUd,KAAMF,KAAMgB,EAAUhB,sB,GAhBnHH,IAAMC,WCiCnBoB,E,kDA/Bb,aAAe,IAAD,8BACZ,gBACKxC,MAAQ,CACXyC,SAAS,EACTxC,WAAOC,GAGT,eAAYwC,cAAgB,EAAKA,cAActC,KAAnB,gBAPhB,E,0DAUAH,GACZM,KAAKC,SAAS,CACZiC,SAAS,EACTxC,MAAOA,M,+BAKT,OAAIM,KAAKP,MAAMyC,SAAWlC,KAAKP,MAAMC,MAC3B,sBAAKc,UAAU,MAAf,UACN,cAAC,EAAD,CAAUF,cAAeN,KAAKmC,gBAC9B,cAAC,EAAD,CAAezC,MAAOM,KAAKP,MAAMC,WAG3B,qBAAKc,UAAU,MAAf,SACN,cAAC,EAAD,CAAUF,cAAeN,KAAKmC,sB,GA1BpBvB,IAAMC,WCCTuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.74c44d0a.chunk.js","sourcesContent":["// @flow\nimport '../style/InputBox.css';\nimport React from 'react';\n\ntype InputBoxProps = {\n  submitHandler: (string) => void,\n}\ntype InputBoxState = {\n  query: ?string,\n}\n\nclass InputBox extends React.Component<InputBoxProps, InputBoxState> {\n  constructor() {\n    super();\n    this.state = {\n      query: undefined,\n    };\n    // NOTE(shayna): this is a workaround for flow\n    (this: any).handleChange = this.handleChange.bind(this);\n    (this: any).handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event: any) {\n    this.setState({ query: event.target.value.trim() });\n  }\n\n  handleSubmit(event: any) {\n    if (this.state.query) this.props.submitHandler(this.state.query.trim());\n    event.preventDefault();\n  }\n\n  render(): any {\n    return (\n      <div className=\"InputBox\">\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            Word:\n                  <input type=\"text\" value={this.state.query} onChange={this.handleChange} />\n          </label>\n          <input type=\"submit\" value=\"Go\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default InputBox;\n","// @flow\nimport React from 'react';\n\ntype SongLyricProps = {\n    album: string,\n    song: string,\n    prev: string,\n    lyric: string,\n    next: string,\n}\n\nclass SongLyric extends React.Component<SongLyricProps> {\n    render(): any {\n        return (\n            <div className=\"SongLyric\">\n                <p>\n                    {this.props.prev}\n                    <br />\n                    {this.props.lyric}\n                    <br />\n                    {this.props.next}\n                </p>\n                {this.props.song}, <i>{this.props.album}</i>\n                <hr></hr>\n            </div>\n        );\n    }\n}\n\nexport default SongLyric;\n","// @flow\nimport React from 'react';\nimport SongLyric from './SongLyric';\n\nconst lyricsJSON = require('../taylor-swift-lyrics/lyrics.json');\n\ntype QueriedLyricsProps = {\n    query: string\n}\n\nclass QueriedLyrics extends React.Component<QueriedLyricsProps> {\n    containsQuery(lyric: string): bool {\n        const query = this.props.query;\n        const regex = new RegExp(`([\\\\.?!,\\\\s]+|^)${query}([\\\\.?!,\\\\s]+|$)`);\n        console.log(regex);\n        return (lyric.search(regex) >= 0);\n    }\n\n    render(): any {\n        return (\n            <div className=\"QueriedLyrics\">\n                {\n                    Object.keys(lyricsJSON).map(album =>\n                        Object.keys(lyricsJSON[album]).map(song =>\n                            lyricsJSON[album][song].map(songLyric => {\n                                if (this.containsQuery(songLyric.lyric)) {\n                                    return (<SongLyric album={album} song={song} lyric={songLyric.lyric} next={songLyric.next} prev={songLyric.prev} />);\n                                }\n                            })\n                        )\n                    )\n                }\n            </div>\n        );\n    }\n}\n\nexport default QueriedLyrics;\n","// @flow\nimport '../style/App.css';\nimport InputBox from './InputBox';\nimport QueriedLyrics from './QueriedLyrics';\nimport React from 'react';\n\ntype AppState = {\n  queried: bool,\n  query: ?string,\n};\n\nclass App extends React.Component<{}, AppState> {\n  constructor() {\n    super();\n    this.state = {\n      queried: false,\n      query: undefined,\n    };\n    // NOTE(shayna): this is a workaround for flow\n    (this: any).searchHandler = this.searchHandler.bind(this);\n  }\n\n  searchHandler(query: string) {\n    this.setState({\n      queried: true,\n      query: query,\n    });\n  }\n\n  render(): any {\n    if (this.state.queried && this.state.query) {\n      return (<div className=\"App\">\n        <InputBox submitHandler={this.searchHandler} />\n        <QueriedLyrics query={this.state.query} />\n      </div>);\n    } else {\n      return (<div className=\"App\">\n        <InputBox submitHandler={this.searchHandler} />\n      </div>);\n    }\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
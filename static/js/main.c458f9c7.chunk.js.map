{"version":3,"sources":["components/utils.js","components/InputBox.js","components/SongLyric.js","components/QueriedLyrics.js","components/InfoButton.js","components/constants.js","components/InfoModal.js","components/FilterSelection.js","components/FilterModal.js","components/App.js","index.js"],"names":["escapeRegExp","str","replace","cleanLyric","lyric","cleaned_lyric","containsQuery","query","toLowerCase","inner_regexp","split","map","join","regex","RegExp","match","start","index","length","queriesFound","found","substring","isMobile","mobileRegex","navigator","userAgent","search","boldQueries","queries","reduce","boldQuery","end","boldedLyric","URL_QUERY_PARAM","URL_ALBUM_PARAM","getURLQueryStrings","URL","window","location","searchParams","getAll","getURLAlbumStrings","mobile","InputBox","submitHandler","filterButtonHandler","queryString","useState","setQuery","useEffect","className","onSubmit","event","trim","preventDefault","type","value","onChange","target","onClick","SongLyric","album","song","prev","next","dangerouslySetInnerHTML","__html","lyricsJSON","require","albumMap","QueriedLyrics","selectedAlbums","isSelectedAlbum","albumCategory","includes","songs","foundInSong","i","songLyric","timesFound","multiplicity","occurrences","countOccurrences","counter","Object","keys","sort","album1","album2","some","InfoButton","handler","ArtistName","ALBUMS","InfoModal","display","style","fontSize","href","FilterSelection","defaultChecked","checked","setChecked","FilterModal","albumFilters","setAlbumFilters","setSelectedAlbums","handleChange","concat","filter","selectedAlbum","App","setQueries","infoModal","setInfoModal","filterModal","setFilterModal","history","useHistory","searchHandler","URLQueryString","push","JSON","stringify","listen","action","ReactDOM","render","basename","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c458f9c7.chunk.js","sourcesContent":["// @flow\n\ntype QueryMatch = {\n  start: number,\n  length: number,\n};\n\n// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping\nconst escapeRegExp = (str: string): string => {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n};\n\nexport const cleanLyric = (lyric: string): string => {\n  // Replace special quotes with normal quotes\n  let cleaned_lyric = lyric.replace(/\\u2018|\\u2019/g, \"'\");\n  cleaned_lyric = cleaned_lyric.replace(/\\u201C|\\u201D/g, '\"');\n  // Replace special unicode spaces with standard space\n  cleaned_lyric = cleaned_lyric.replace(\n    /[\\u00A0\\u1680​\\u180e\\u2000-\\u2009\\u200a​\\u200b​\\u202f\\u205f​\\u3000]/g,\n    \" \"\n  );\n  // Replace dashes with space and single hyphen\n  cleaned_lyric = cleaned_lyric.replace(/\\u2013|\\u2014/g, \" - \");\n  // Replace cyrillic + accented Es with normal Es\n  cleaned_lyric = cleaned_lyric.replace(/\\u0435/g, \"e\");\n  return cleaned_lyric;\n};\n\nexport const containsQuery = (lyric: string, query: string): QueryMatch => {\n  query = cleanLyric(query.toLowerCase());\n  query = query.replace(/\\u00e9/g, \"e\");\n  lyric = lyric.replace(/\\u00e9/g, \"e\");\n\n  const query_sections = query.split(\"*\").map(escapeRegExp);\n  const inner_regexp = query_sections.join(\"\\\\w*\");\n  const regex = new RegExp(\n    `([\\\\(\\\\)\\\\.\\\\-?!;:,\\\\s\\u2026\"]|^'*)${inner_regexp}('*[\\\\(\\\\)\\\\.\\\\-?!;:,\\\\s\\u2026\"]|$)`\n  );\n\n  const match = cleanLyric(lyric.toLowerCase()).match(regex);\n  // Adding length of the first capturing group (1 or 0) to `start` so it starts at word\n  const start = match != null ? match.index + match[1].length : -1;\n  // Subtracting capturing group lengths to make sure only length of word is sent\n  const length =\n    match != null ? match[0].length - (match[1].length + match[2].length) : -1;\n  return {\n    start,\n    length,\n  };\n};\n\nexport const getQueryLength = (query: string): number => {\n  return query.replace(\"*\", \"\").length;\n};\n\nexport const queriesFound = (lyric: string, query: string): number => {\n  lyric = cleanLyric(lyric);\n  query = cleanLyric(query);\n  let found = 0;\n  do {\n    let { start, length } = containsQuery(lyric, query);\n    if (start === -1) {\n      return found;\n    }\n    found += 1;\n    lyric = lyric.substring(start + length);\n  } while (lyric.length > 0);\n  return found;\n};\n\nexport const isMobile = (): boolean => {\n  const mobileRegex = new RegExp(\n    `Android|webOS|iPhone|iPad|BlackBerry|Phone|Mobile`\n  );\n  return navigator.userAgent.search(mobileRegex) >= 0;\n};\n\nexport const boldQueries = (lyric: string, queries: Array<string>): string => {\n  lyric = cleanLyric(lyric);\n  return queries.reduce(boldQuery, lyric);\n};\n\nexport const boldQuery = (lyric: string, query: string): string => {\n  query = cleanLyric(query);\n  let end: number;\n  let boldedLyric = \"\";\n  do {\n    let { start, length } = containsQuery(lyric, query);\n    if (start === -1) {\n      return boldedLyric + lyric;\n    }\n    end = start + length;\n\n    boldedLyric =\n      boldedLyric +\n      lyric.substring(0, start) +\n      '<span class=\"query\">' +\n      lyric.substring(start, end) +\n      \"</span>\";\n    lyric = lyric.substring(end);\n  } while (lyric.length > 0);\n  return boldedLyric;\n};\n\nexport const URL_QUERY_PARAM = \"query\";\nexport const URL_ALBUM_PARAM = \"album\";\n\nexport const getURLQueryStrings = (): Array<string> => {\n  const currentURL = new URL(window.location);\n  return currentURL.searchParams.getAll(URL_QUERY_PARAM);\n};\n\nexport const getURLAlbumStrings = (): Array<string> => {\n  const currentURL = new URL(window.location);\n  return currentURL.searchParams.getAll(URL_ALBUM_PARAM);\n};\n","// @flow\nimport \"../style/InputBox.css\";\nimport { isMobile } from \"./utils\";\nimport React, { useEffect, useState } from \"react\";\n\nconst mobile = isMobile();\n\ntype InputBoxProps = {\n  submitHandler: (string) => void,\n  filterButtonHandler: () => void,\n  queryString: string,\n};\n\nexport default function InputBox({\n  submitHandler,\n  filterButtonHandler,\n  queryString,\n}: InputBoxProps): React$MixedElement {\n  const [query, setQuery] = useState<string>(queryString);\n\n  useEffect(() => {\n    setQuery(queryString);\n  }, [queryString]);\n\n  const handleChange = (event: any) => {\n    setQuery(event.target.value);\n  };\n\n  const handleSubmit = (event: any) => {\n    if (query !== \"\") submitHandler(query.trim());\n    event.preventDefault();\n  };\n\n  return (\n    <>\n      <div className=\"InputBox\">\n        <form onSubmit={handleSubmit}>\n          <label>\n            <input\n              className={mobile ? \"queryBox queryBox-mobile\" : \"queryBox\"}\n              type=\"text\"\n              value={query}\n              onChange={handleChange}\n            />\n          </label>\n          <input className=\"submitButton\" type=\"submit\" value=\"➔\" />\n        </form>\n        <div className=\"filterModalButtonWrapper\">\n          <span className=\"filterModalButton\" onClick={filterButtonHandler}>\n            Filter by album\n          </span>\n        </div>\n      </div>\n    </>\n  );\n}\n","// @flow\nimport \"../style/SongLyric.css\";\nimport { boldQueries } from \"./utils.js\";\nimport React from \"react\";\n\ntype SongLyricProps = {\n  album: string,\n  song: string,\n  prev: string,\n  lyric: string,\n  next: string,\n  queries: Array<string>,\n};\n\nexport default function SongLyric({\n  album,\n  song,\n  prev,\n  lyric,\n  next,\n  queries,\n}: SongLyricProps): React$MixedElement {\n  return (\n    <div className=\"SongLyric\">\n      <p>\n        {prev}\n        {prev.length > 0 ? <br /> : \"\"}\n        <span\n          className=\"lyric\"\n          dangerouslySetInnerHTML={{\n            __html: boldQueries(lyric, queries),\n          }}\n        />\n        {next.length > 0 ? <br /> : \"\"}\n        {next}\n      </p>\n      {song}\n      {album !== \"NaN\" ? \",\" : \"\"} <i>{album !== \"NaN\" ? album : \"\"}</i>\n      <hr></hr>\n    </div>\n  );\n}\n","// @flow\nimport \"../style/QueriedLyrics.css\";\nimport React from \"react\";\nimport SongLyric from \"./SongLyric\";\nimport { containsQuery, isMobile, queriesFound } from \"./utils.js\";\n\nconst lyricsJSON = require(\"../taylor-swift-lyrics/lyrics.json\");\nconst albumMap = require(\"../taylor-swift-lyrics/album_map.json\");\nconst mobile = isMobile();\ntype QueriedLyricsProps = {\n  queries: Array<string>,\n  selectedAlbums: Array<string>,\n};\n\nexport default function QueriedLyrics({\n  queries,\n  selectedAlbums,\n}: QueriedLyricsProps): React$MixedElement {\n  const isSelectedAlbum = (album: string): boolean => {\n    if (selectedAlbums.length === 0) {\n      return true;\n    }\n    for (const albumCategory of albumMap[album]) {\n      if (selectedAlbums.includes(albumCategory)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  const countOccurrences = (): { occurrences: number, songs: number } => {\n    let found = 0;\n    let songs = 0;\n    for (const query of queries) {\n      for (const album in lyricsJSON) {\n        if (album !== \"Uncategorized\" && isSelectedAlbum(album)) {\n          for (const song in lyricsJSON[album]) {\n            let foundInSong = false;\n            for (let i = 0; i < lyricsJSON[album][song].length; i++) {\n              const songLyric = lyricsJSON[album][song][i];\n              const timesFound = queriesFound(songLyric.lyric, query);\n              found += songLyric.multiplicity * timesFound;\n              foundInSong = foundInSong || timesFound > 0;\n            }\n            songs += foundInSong ? 1 : 0;\n          }\n        }\n      }\n    }\n    return { occurrences: found, songs: songs };\n  };\n\n  const { occurrences, songs } = countOccurrences();\n  let counter = 0;\n  return (\n    <div>\n      <div className={mobile ? \"QueriedLyrics-mobile\" : \"QueriedLyrics\"}>\n        {Object.keys(lyricsJSON)\n          .sort((album1, album2) => {\n            if (album1 === \"Unreleased Songs\") {\n              return 1;\n            } else if (album2 === \"Unreleased Songs\") {\n              return -1;\n            }\n            return 0;\n          })\n          .map((album) =>\n            Object.keys(lyricsJSON[album]).map((song) =>\n              lyricsJSON[album][song].map((songLyric) => {\n                counter++;\n                if (\n                  isSelectedAlbum(album) &&\n                  queries.some(\n                    (query) =>\n                      containsQuery(songLyric.lyric, query)[\"start\"] >= 0\n                  ) &&\n                  album !== \"Uncategorized\"\n                ) {\n                  return (\n                    <SongLyric\n                      key={counter}\n                      album={\n                        !albumMap[album].includes(\"Collaborations\") &&\n                        !albumMap[album].includes(\"Movie Soundtracks\")\n                          ? albumMap[album]\n                          : album\n                      }\n                      song={song}\n                      lyric={songLyric.lyric}\n                      next={songLyric.next}\n                      prev={songLyric.prev}\n                      queries={queries}\n                    />\n                  );\n                }\n                return <></>;\n              })\n            )\n          )}\n      </div>\n      <div className={mobile ? \"totalResults-mobile\" : \"totalResults\"}>\n        Found {occurrences} usage{occurrences === 1 ? \"\" : \"s\"} in {songs} song\n        {songs === 1 ? \"\" : \"s\"}\n        {selectedAlbums.length > 0 ? \" from selected albums\" : \"\"}\n      </div>\n    </div>\n  );\n}\n","// @flow\nimport \"../style/InfoButton.css\";\nimport React from \"react\";\n\ntype InfoButtonProps = {\n  handler: (any) => void,\n};\n\nexport default function InfoButton({\n  handler,\n}: InfoButtonProps): React$MixedElement {\n  return (\n    <div className=\"InfoButton\" onClick={handler}>\n      ?\n    </div>\n  );\n}\n","// @flow\nexport const ArtistName = \"taylor swift\";\n\nexport const ModalText =\n  'Search for a word or a phrase and see all the places Taylor Swift \\\n  has used it in her music! To search for multiple words or phrases, use \\\n  a comma between them. Use a * for wildcard search. Scraped data can be found \\\n  <a href=\"https://github.com/shaynak/taylor-swift-lyrics\">here</a>. \\\n  Curious about what people are searching? See our \\\n  <a href=\"https://shaynak-taylor-swift.goatcounter.com/\">analytics</a>! \\\n  <br><br>Last updated: 3/26/22. First published 12/28/20.';\n\n// Ordered list of albums for selector - keep in sync with album map\nexport const ALBUMS = [\n  \"Taylor Swift\",\n  \"Beautiful Eyes\",\n  \"Fearless\",\n  \"Speak Now\",\n  \"Red\",\n  \"1989\",\n  \"reputation\",\n  \"Lover\",\n  \"folklore\",\n  \"evermore\",\n  \"Collaborations\",\n  \"Movie Soundtracks\"\n];","// @flow\nimport \"../style/InfoModal.css\";\nimport { isMobile } from \"./utils\";\nimport { ModalText } from \"./constants\";\nimport React from \"react\";\n\nconst mobile = isMobile();\n\ntype InfoModalProps = {\n  handler: () => void,\n  display: boolean,\n};\n\nexport default function InfoModal({\n  handler,\n  display,\n}: InfoModalProps): React$MixedElement {\n  const clickOutHandler = (event: any) => {\n    if (event.target.className !== \"ModalBox\") {\n      handler();\n    }\n  };\n\n  return (\n    <div\n      className=\"InfoModal\"\n      onClick={clickOutHandler}\n      style={{ display: display ? \"block\" : \"none\" }}\n    >\n      <div className={mobile ? \"ModalBox ModalBox-mobile\" : \"ModalBox\"}>\n        <p dangerouslySetInnerHTML={{ __html: ModalText }} />\n        {/** CREDITS: Please do not edit this. Feel free to add your own credits to ModalText. */}\n        <p style={{ fontSize: \"14px\" }}>\n          Made by&nbsp;<a href=\"http://shaynak.github.io\">Shayna Kothari</a>\n          &nbsp;using&nbsp;\n          <a href=\"http://reactjs.org\">React</a>. Lyrics scraped from&nbsp;\n          <a href=\"http://genius.com\">Genius</a>&nbsp; using&nbsp;\n          <a href=\"https://github.com/johnwmillr/LyricsGenius\">LyricsGenius</a>.\n          If you have comments or suggestions, contact me by{\" \"}\n          <a href=\"mailto:shayna.kothari@berkeley.edu\">email</a>!\n        </p>\n      </div>\n    </div>\n  );\n}\n","//@flow\nimport \"../style/FilterSelection.css\";\nimport React, { useState } from \"react\";\n\ntype FilterSelectionProps = {\n  defaultChecked: boolean,\n  value: string,\n  onChange: (string, boolean) => void,\n};\n\nexport default function FilterSelection({\n  defaultChecked,\n  value,\n  onChange,\n}: FilterSelectionProps): React$MixedElement {\n  const [checked, setChecked] = useState<boolean>(defaultChecked);\n  const onClick = () => {\n      onChange(value, !checked);\n      setChecked(!checked);\n  }\n  return (\n    <div\n      className={\n        checked ? \"FilterSelection FilterSelectionChecked\" : \"FilterSelection\"\n      }\n      onClick={onClick}\n    >\n      {value}\n    </div>\n  );\n}\n","// @flow\nimport \"../style/FilterModal.css\";\nimport { isMobile } from \"./utils\";\nimport { ALBUMS } from \"./constants\";\nimport React, { useState } from \"react\";\nimport FilterSelection from \"./FilterSelection\";\n\nconst mobile = isMobile();\n\ntype FilterModalProps = {\n  albumFilters: Array<string>,\n  handler: () => void,\n  setAlbumFilters: (Array<string>) => void,\n  display: boolean,\n};\n\nexport default function FilterModal({\n  albumFilters,\n  handler,\n  setAlbumFilters,\n  display,\n}: FilterModalProps): React$MixedElement {\n  const [selectedAlbums, setSelectedAlbums] = useState<Array<string>>(\n    albumFilters\n  );\n\n  const clickOutHandler = (event: any) => {\n    if (event.target.className === \"FilterModal\") {\n      setAlbumFilters(selectedAlbums);\n      handler();\n    }\n  };\n\n  const handleChange = (album: string, checked: boolean) => {\n    if (checked && !selectedAlbums.includes(album)) {\n      setSelectedAlbums(selectedAlbums.concat(album));\n    } else if (!checked) {\n      setSelectedAlbums(\n        selectedAlbums.filter((selectedAlbum) => selectedAlbum !== album)\n      );\n    }\n  };\n\n  return (\n    <div\n      className=\"FilterModal\"\n      onClick={clickOutHandler}\n      style={{ display: display ? \"block\" : \"none\" }}\n    >\n      <div className={mobile ? \"ModalBox ModalBox-mobile\" : \"ModalBox\"}>\n        Select any albums and/or categories of music that you'd like to filter\n        on! If no albums are selected, all albums will be searched. Click out to\n        save.\n        <div className=\"filterInput\">\n          {ALBUMS.map((album) => (\n            <FilterSelection\n              defaultChecked={selectedAlbums.includes(album)}\n              value={album}\n              onChange={handleChange}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","// @flow\nimport \"../style/index.css\";\nimport \"../style/App.css\";\nimport InputBox from \"./InputBox\";\nimport QueriedLyrics from \"./QueriedLyrics\";\nimport InfoButton from \"./InfoButton\";\nimport InfoModal from \"./InfoModal\";\nimport FilterModal from \"./FilterModal\";\nimport {\n  isMobile,\n  getURLQueryStrings,\n  getURLAlbumStrings,\n  URL_QUERY_PARAM,\n  URL_ALBUM_PARAM,\n} from \"./utils\";\nimport { ArtistName } from \"./constants\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst mobile = isMobile();\n\nfunction App(): React$MixedElement {\n  const [queries, setQueries] = useState<Array<string>>(getURLQueryStrings());\n  const [albumFilters, setAlbumFilters] = useState<Array<string>>(\n    getURLAlbumStrings()\n  );\n  const [infoModal, setInfoModal] = useState<boolean>(false);\n  const [filterModal, setFilterModal] = useState<boolean>(false);\n  const history = useHistory();\n\n  const searchHandler = (query: string) => {\n    const queryStrings = query\n      .split(\",\")\n      .map((queryString) => queryString.trim())\n      .filter((queryString) => queryString !== \"\");\n    const URLQueryString = queryStrings\n      .map((query) => URL_QUERY_PARAM + \"=\" + query)\n      .concat(albumFilters.map((album) => URL_ALBUM_PARAM + \"=\" + album))\n      .join(\"&\");\n    history.push({ search: URLQueryString });\n  };\n\n  useEffect(() => {\n    // Re-do search if user selects filters unless user is on home screen\n    if (queries.length > 0) {\n      searchHandler(queries.join(\",\"));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(albumFilters)]);\n\n  history.listen((location, action) => {\n    setQueries(getURLQueryStrings());\n    setAlbumFilters(getURLAlbumStrings());\n  });\n\n  const infoButtonHandler = () => setInfoModal(true);\n  const infoModalHandler = () => setInfoModal(false);\n\n  const filterButtonHandler = () => setFilterModal(true);\n  const filterModalHandler = () => setFilterModal(false);\n\n  return (\n    <div className=\"App\">\n      <InfoModal handler={infoModalHandler} display={infoModal} />\n      <FilterModal\n        handler={filterModalHandler}\n        display={filterModal}\n        albumFilters={albumFilters}\n        setAlbumFilters={setAlbumFilters}\n      />\n      {queries.length > 0 ? (\n        <div className=\"top-title\">\n          <span\n            className={mobile ? \"top-text-mobile header\" : \"top-text header\"}\n            onClick={(event) => {\n              setQueries([]);\n              setAlbumFilters([]);\n              history.push(\"/\");\n            }}\n          >\n            {ArtistName} lyric searcher\n          </span>\n        </div>\n      ) : (\n        <div className=\"title\">\n          <span\n            className={\n              mobile ? \"title-text-mobile header\" : \"title-text header\"\n            }\n          >\n            {ArtistName} <br /> lyric searcher\n          </span>\n        </div>\n      )}\n      <InputBox\n        submitHandler={searchHandler}\n        filterButtonHandler={filterButtonHandler}\n        queryString={queries.join(\", \")}\n      />\n      {queries.length > 0 ? (\n        <QueriedLyrics queries={queries} selectedAlbums={albumFilters} />\n      ) : (\n        <div className=\"tips\">New: Use a * to do wildcard search!</div>\n      )}\n      <InfoButton handler={infoButtonHandler}></InfoButton>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.css\";\nimport App from \"./components/App\";\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nReactDOM.render(\n  <Router basename='/taylor-swift' >\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Router>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}
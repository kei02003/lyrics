{"version":3,"sources":["components/utils.js","components/InputBox.js","components/SongLyric.js","components/QueriedLyrics.js","components/InfoButton.js","components/constants.js","components/InfoModal.js","components/App.js","reportWebVitals.js","index.js"],"names":["cleanLyric","lyric","cleaned_lyric","replace","containsQuery","query","toLowerCase","regex","RegExp","search","queriesFound","start","found","substring","length","isMobile","mobileRegex","navigator","userAgent","boldQueries","queries","reduce","boldQuery","end","boldedLyric","charAt","mobile","InputBox","submitHandler","useState","setQuery","className","onSubmit","event","trim","preventDefault","type","value","onChange","target","SongLyric","album","song","prev","next","dangerouslySetInnerHTML","__html","lyricsJSON","require","QueriedLyrics","counter","Object","keys","sort","album1","album2","map","songLyric","some","nextLyric","i","multiplicity","countOccurrences","InfoButton","handler","onClick","ArtistName","InfoModal","display","style","fontSize","href","App","queried","setQueried","setQueries","modal","setModal","window","location","reload","split","queryString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7af4f565.chunk.js","sourcesContent":["// @flow\n\n// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping\nconst escapeRegExp = (str: string): string => {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n};\n\nconst cleanLyric = (lyric: string): string => {\n  // Replace special quotes with normal quotes\n  let cleaned_lyric = lyric.replace(/\\u2018|\\u2019/g, \"'\");\n  cleaned_lyric = cleaned_lyric.replace(/\\u201C|\\u201D/g, '\"');\n  // Replace special unicode spaces with standard space\n  cleaned_lyric = cleaned_lyric.replace(\n    /[\\u00A0\\u1680​\\u180e\\u2000-\\u2009\\u200a​\\u200b​\\u202f\\u205f​\\u3000]/g,\n    \" \"\n  );\n  // Replace dashes with space and single hyphen\n  cleaned_lyric = cleaned_lyric.replace(/\\u2013|\\u2014/g, \" - \");\n  // Replace cyrillic + accented Es with normal Es\n  cleaned_lyric = cleaned_lyric.replace(/\\u0435/g, \"e\");\n  return cleaned_lyric;\n};\n\nexport const containsQuery = (lyric: string, query: string): number => {\n  query = cleanLyric(query.toLowerCase());\n  query = query.replace(/\\u00e9/g, \"e\");\n  lyric = lyric.replace(/\\u00e9/g, \"e\");\n  const regex = new RegExp(\n    `([\\\\(\\\\)\\\\.\\\\-?!;:,\\\\s\\u2026\"]|^)${escapeRegExp(\n      query\n    )}([\\\\(\\\\)\\\\.\\\\-?!;:,\\\\s\\u2026\"]|$)`\n  );\n  return cleanLyric(lyric.toLowerCase()).search(regex);\n};\n\nexport const queriesFound = (lyric: string, query: string): number => {\n  lyric = cleanLyric(lyric);\n  query = cleanLyric(query);\n  let start: number;\n  let found = 0;\n  do {\n    start = containsQuery(lyric, query);\n    if (start === -1) {\n      return found;\n    }\n    found += 1;\n    lyric = lyric.substring(start + query.length);\n  } while (lyric.length > 0);\n  return found;\n};\n\nexport const isMobile = (): boolean => {\n  const mobileRegex = new RegExp(\n    `Android|webOS|iPhone|iPad|BlackBerry|Phone|Mobile`\n  );\n  return navigator.userAgent.search(mobileRegex) >= 0;\n};\n\nexport const boldQueries = (lyric: string, queries: Array<string>): string => {\n  lyric = cleanLyric(lyric);\n  return queries.reduce(boldQuery, lyric);\n}\n\nexport const boldQuery = (lyric: string, query: string): string => {\n  query = cleanLyric(query);\n  let start: number, end: number;\n  let boldedLyric = \"\";\n  do {\n    start = containsQuery(lyric, query);\n    if (start === -1) {\n      return boldedLyric + lyric;\n    }\n    end = start + query.length;\n    // If not at the beginning, we need to shift start and end\n    // because containsQuery will return the index of the space\n    // before the start of the query\n    if (lyric.toLowerCase().charAt(0) !== query.toLowerCase().charAt(0)) {\n      start += 1;\n      end += 1;\n    }\n    boldedLyric =\n      boldedLyric +\n      lyric.substring(0, start) +\n      '<span class=\"query\">' +\n      lyric.substring(start, end) +\n      \"</span>\";\n    lyric = lyric.substring(end);\n  } while (lyric.length > 0);\n  return boldedLyric;\n};\n","// @flow\nimport \"../style/InputBox.css\";\nimport { isMobile } from \"./utils\";\nimport React, { useState } from \"react\";\n\nconst mobile = isMobile();\n\ntype InputBoxProps = {\n  submitHandler: (string) => void,\n};\n\nexport default function InputBox({\n  submitHandler,\n}: InputBoxProps): React$MixedElement {\n  const [query, setQuery] = useState<string>(\"\");\n\n  const handleChange = (event: any) => {\n    setQuery(event.target.value);\n  };\n\n  const handleSubmit = (event: any) => {\n    if (query !== \"\") submitHandler(query.trim());\n    event.preventDefault();\n  };\n\n  return (\n    <div className=\"InputBox\">\n      <form onSubmit={handleSubmit}>\n        <label>\n          <input\n            className={mobile ? \"queryBox queryBox-mobile\" : \"queryBox\"}\n            type=\"text\"\n            value={query}\n            onChange={handleChange}\n          />\n        </label>\n        <input className=\"submitButton\" type=\"submit\" value=\"➔\" />\n      </form>\n    </div>\n  );\n}\n","// @flow\nimport \"../style/SongLyric.css\";\nimport { boldQueries } from \"./utils.js\";\nimport React from \"react\";\n\ntype SongLyricProps = {\n  album: string,\n  song: string,\n  prev: string,\n  lyric: string,\n  next: string,\n  queries: Array<string>,\n};\n\nexport default function SongLyric({\n  album,\n  song,\n  prev,\n  lyric,\n  next,\n  queries,\n}: SongLyricProps): React$MixedElement {\n  return (\n    <div className=\"SongLyric\">\n      <p>\n        {prev}\n        {prev.length > 0 ? <br /> : \"\"}\n        <span\n          className=\"lyric\"\n          dangerouslySetInnerHTML={{\n            __html: boldQueries(lyric, queries),\n          }}\n        />\n        {next.length > 0 ? <br /> : \"\"}\n        {next}\n      </p>\n      {song}\n      {album !== \"NaN\" ? \",\" : \"\"} <i>{album !== \"NaN\" ? album : \"\"}</i>\n      <hr></hr>\n    </div>\n  );\n}\n","// @flow\nimport \"../style/QueriedLyrics.css\";\nimport React from \"react\";\nimport SongLyric from \"./SongLyric\";\nimport { containsQuery, isMobile, queriesFound } from \"./utils.js\";\n\nconst lyricsJSON = require(\"../taylor-swift-lyrics/lyrics.json\");\nconst mobile = isMobile();\ntype QueriedLyricsProps = {\n  queries: Array<string>,\n};\n\nexport default function QueriedLyrics({\n  queries,\n}: QueriedLyricsProps): React$MixedElement {\n  const countOccurrences = (): number => {\n    let found = 0;\n    for (const query of queries) {\n    for (const album in lyricsJSON) {\n      if (album !== \"Uncategorized\") {\n        for (const song in lyricsJSON[album]) {\n          for (let i = 0; i < lyricsJSON[album][song].length; i++) {\n            const songLyric = lyricsJSON[album][song][i];\n            found +=\n              songLyric.multiplicity * queriesFound(songLyric.lyric, query);\n          }\n        }\n      }\n    }\n  }\n    return found;\n  };\n\n  let counter = 0;\n  return (\n    <div>\n      <div className={mobile ? \"QueriedLyrics-mobile\" : \"QueriedLyrics\"}>\n        {Object.keys(lyricsJSON)\n          .sort((album1, album2) => {\n            if (album1 === \"Unreleased Songs\") {\n              return 1;\n            } else if (album2 === \"Unreleased Songs\") {\n              return -1;\n            }\n            return 0;\n          })\n          .map((album) =>\n            Object.keys(lyricsJSON[album]).map((song) =>\n              lyricsJSON[album][song].map((songLyric) => {\n                counter++;\n                if (\n                  queries.some(query => containsQuery(songLyric.lyric, query) >= 0) &&\n                  album !== \"Uncategorized\"\n                ) {\n                  // Temporary fix because get_lyric_list in scraper.py is failing at this\n                  const nextLyric =\n                    songLyric.next[0] === \"[\" ? \"\" : songLyric.next;\n                  return (\n                    <SongLyric\n                      key={counter}\n                      album={album}\n                      song={song}\n                      lyric={songLyric.lyric}\n                      next={nextLyric}\n                      prev={songLyric.prev}\n                      queries={queries}\n                    />\n                  );\n                }\n                return <></>;\n              })\n            )\n          )}\n      </div>\n      <div className={mobile ? \"totalResults-mobile\" : \"totalResults\"}>\n        Total usages found: {countOccurrences()}\n      </div>\n    </div>\n  );\n}\n","// @flow\nimport \"../style/InfoButton.css\";\nimport React from \"react\";\n\ntype InfoButtonProps = {\n  handler: (any) => void,\n};\n\nexport default function InfoButton({\n  handler,\n}: InfoButtonProps): React$MixedElement {\n  return (\n    <div className=\"InfoButton\" onClick={handler}>\n      ?\n    </div>\n  );\n}\n","// @flow\nexport const ArtistName = \"taylor swift\";\n\nexport const ModalText =\n  'Search for a word or a phrase and see all the places Taylor Swift \\\n  has used it in her music! To search for multiple words or phrases, use \\\n  a comma between them. Scraped data can be found \\\n  <a href=\"https://github.com/shaynak/taylor-swift-lyrics\">here</a>. \\\n  Last update: 10/5/21.';\n","// @flow\nimport \"../style/InfoModal.css\";\nimport { isMobile } from \"./utils\";\nimport { ModalText } from \"./constants\";\nimport React from \"react\";\n\nconst mobile = isMobile();\n\ntype InfoModalProps = {\n  handler: () => void,\n  display: boolean,\n};\n\nexport default function InfoModal({\n  handler,\n  display,\n}: InfoModalProps): React$MixedElement {\n  const clickOutHandler = (event: any) => {\n    if (event.target.className !== \"ModalBox\") {\n      handler();\n    }\n  };\n\n  return (\n    <div\n      className=\"InfoModal\"\n      onClick={clickOutHandler}\n      style={{ display: display ? \"block\" : \"none\" }}\n    >\n      <div className={mobile ? \"ModalBox ModalBox-mobile\" : \"ModalBox\"}>\n        <p dangerouslySetInnerHTML={{ __html: ModalText }} />\n        {/** CREDITS: Please do not edit this. Feel free to add your own credits to ModalText. */}\n        <p style={{ fontSize: \"14px\" }}>\n          Made by&nbsp;<a href=\"http://shaynak.github.io\">Shayna Kothari</a>\n          &nbsp;using&nbsp;\n          <a href=\"http://reactjs.org\">React</a>. Lyrics scraped from&nbsp;\n          <a href=\"http://genius.com\">Genius</a>&nbsp; using&nbsp;\n          <a href=\"https://github.com/johnwmillr/LyricsGenius\">LyricsGenius</a>.\n          If you have comments or suggestions, contact me by{\" \"}\n          <a href=\"mailto:shayna.kothari@berkeley.edu\">email</a> or find me on{\" \"}\n          <a href=\"http://twitter.com/shaynapping\">Twitter</a>!\n        </p>\n      </div>\n    </div>\n  );\n}\n","// @flow\nimport \"../style/index.css\";\nimport \"../style/App.css\";\nimport InputBox from \"./InputBox\";\nimport QueriedLyrics from \"./QueriedLyrics\";\nimport InfoButton from \"./InfoButton\";\nimport InfoModal from \"./InfoModal\";\nimport { isMobile } from \"./utils\";\nimport { ArtistName } from \"./constants\";\nimport React, { useState } from \"react\";\n\nconst mobile = isMobile();\n\nfunction App(): React$MixedElement {\n  const [queried, setQueried] = useState<boolean>(false);\n  const [queries, setQueries] = useState<Array<string>>([]);\n  const [modal, setModal] = useState<boolean>(false);\n\n  const searchHandler = (query: string) => {\n    setQueried(true);\n    setQueries(query.split(',').map(queryString => queryString.trim()));\n  };\n  const infoButtonHandler = () => setModal(true);\n  const infoModalHandler = () => setModal(false);\n\n  return (\n    <div className=\"App\">\n      <InfoModal handler={infoModalHandler} display={modal} />\n      {queried && queries.length > 0 ? (\n        <div className=\"top-title\">\n          <span\n            className={mobile ? \"top-text-mobile header\" : \"top-text header\"}\n            onClick={(event) => window.location.reload()}\n          >\n            {ArtistName} lyric searcher\n          </span>\n        </div>\n      ) : (\n        <div className=\"title\">\n          <span\n            className={\n              mobile ? \"title-text-mobile header\" : \"title-text header\"\n            }\n          >\n            {ArtistName} <br /> lyric searcher\n          </span>\n        </div>\n      )}\n      <InputBox submitHandler={searchHandler} />\n      {queried && queries.length > 0 ? <QueriedLyrics queries={queries} /> : null}\n      <InfoButton handler={infoButtonHandler}></InfoButton>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}